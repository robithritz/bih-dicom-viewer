<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test DICOM Viewer</title>

    <!-- Cornerstone.js dependencies -->
    <script src="https://unpkg.com/cornerstone-core@2.6.1/dist/cornerstone.min.js"></script>
    <script
        src="https://unpkg.com/cornerstone-wado-image-loader@4.13.2/dist/cornerstoneWADOImageLoader.bundle.min.js"></script>
    <script src="https://unpkg.com/dicom-parser@1.8.21/dist/dicomParser.min.js"></script>

    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background: #1a1a1a;
            color: white;
        }

        #dicomImage {
            width: 512px;
            height: 512px;
            border: 1px solid #333;
            background: #000;
            margin: 20px 0;
        }

        .info {
            background: #333;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }

        .error {
            background: #ff4444;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }

        .success {
            background: #44ff44;
            color: black;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>

<body>
    <h1>Test DICOM Viewer</h1>
    <p>Testing file: <strong>
            <%= filename %>
        </strong></p>

    <div id="status">Loading...</div>

    <div id="dicomImage"></div>

    <div id="imageInfo" class="info" style="display: none;">
        <h3>Image Information:</h3>
        <div id="infoContent"></div>
    </div>

    <script>
        console.log('Starting test viewer...');

        // Global variables
        let element;
        let imageId;

        function updateStatus(message, type = 'info') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = type;
            console.log(`[${type.toUpperCase()}] ${message}`);
        }

        function showImageInfo(image) {
            const infoDiv = document.getElementById('imageInfo');
            const contentDiv = document.getElementById('infoContent');

            contentDiv.innerHTML = `
                <p><strong>Dimensions:</strong> ${image.width} × ${image.height}</p>
                <p><strong>Pixel Spacing:</strong> ${image.rowPixelSpacing || 'N/A'} × ${image.columnPixelSpacing || 'N/A'}</p>
                <p><strong>Window Center:</strong> ${image.windowCenter || 'N/A'}</p>
                <p><strong>Window Width:</strong> ${image.windowWidth || 'N/A'}</p>
                <p><strong>Rescale Intercept:</strong> ${image.intercept || 'N/A'}</p>
                <p><strong>Rescale Slope:</strong> ${image.slope || 'N/A'}</p>
                <p><strong>Min Pixel Value:</strong> ${image.minPixelValue || 'N/A'}</p>
                <p><strong>Max Pixel Value:</strong> ${image.maxPixelValue || 'N/A'}</p>
            `;

            infoDiv.style.display = 'block';
        }

        function initializeTest() {
            try {
                updateStatus('Initializing Cornerstone...');

                // Get the element
                element = document.getElementById('dicomImage');

                // Enable Cornerstone on the element
                cornerstone.enable(element);
                updateStatus('Cornerstone element enabled');

                // Configure WADO Image Loader
                cornerstoneWADOImageLoader.external.cornerstone = cornerstone;
                cornerstoneWADOImageLoader.external.dicomParser = dicomParser;

                // Configure WADO settings
                cornerstoneWADOImageLoader.configure({
                    beforeSend: function (xhr) {
                        updateStatus('Sending request for DICOM file...');
                    },
                    errorInterceptor: function (error) {
                        updateStatus('WADO Image Loader Error: ' + error.message, 'error');
                        console.error('WADO Error Details:', error);
                        return error;
                    }
                });

                // Register the WADO image loader
                cornerstone.registerImageLoader('wadouri', cornerstoneWADOImageLoader.wadouri.loadImage);

                updateStatus('WADO Image Loader configured');

                // Load the image
                loadTestImage();

            } catch (error) {
                updateStatus('Initialization Error: ' + error.message, 'error');
                console.error('Initialization error:', error);
            }
        }

        function loadTestImage() {
            const filename = '<%= filename %>';

            // Try different image ID formats
            const imageIds = [
                `wadouri:/dicom-file/${filename}`,
                `wadouri:http://localhost:3000/dicom-file/${filename}`
            ];

            let currentIndex = 0;

            function tryNextImageId() {
                if (currentIndex >= imageIds.length) {
                    updateStatus('All image loading methods failed', 'error');
                    return;
                }

                imageId = imageIds[currentIndex];
                updateStatus(`Trying to load image with ID: ${imageId}`);

                cornerstone.loadImage(imageId)
                    .then(function (image) {
                        updateStatus('Image loaded successfully!', 'success');
                        console.log('Loaded image:', image);

                        // Display the image
                        cornerstone.displayImage(element, image);
                        updateStatus('Image displayed successfully!', 'success');

                        // Show image information
                        showImageInfo(image);

                    })
                    .catch(function (error) {
                        updateStatus(`Failed with ${imageId}: ${error.message}`, 'error');
                        console.error('Load error:', error);

                        currentIndex++;
                        if (currentIndex < imageIds.length) {
                            setTimeout(tryNextImageId, 1000);
                        } else {
                            updateStatus('All loading methods failed', 'error');
                        }
                    });
            }

            tryNextImageId();
        }

        // Start when page loads
        document.addEventListener('DOMContentLoaded', initializeTest);
    </script>
</body>

</html>